#!/usr/bin/env python

"""
    Adds natbib labels to an existing BBL file.

Usage:
    natbbl.py labelled.bbl unlabelled.bbl [out.bbl]

Description:
    Updates a BBL file that contains unlabelled \\bibitem entries
    (\\bibitem{Key}) with labelled entries (\\bibitem[Label]{Key})
    so that the BBL file can be used for natbib commands such as
    \\citeauthor{}.

    The labels are taken from a BBL file that contains labelled
    entries (e.g. as generated by first using a bibliography
    style that supports the natbib commands, such as plainnat).

Arguments:
    labelled.bbl    A BBL file with labelled \\bibitem entries.
    unlabelled.bbl  A BBL file with unlabelled \\bibitem entries.
    out.bbl         The (optional) output file (default: stdout).
"""

__author__    = "Rob Moss"
__copyright__ = "Copyright 2011, Rob Moss"
__license__   = "Simplified BSD License"

import re
import sys

def label_dict(bbl_file):
    """
    Build a dictionary that maps BiBTeX citation keys to the associated
    natbib labels, as defined in the input BBL file.
    """
    dict = {}
    re_label = r'\\bibitem\[([^]]*)\]\{([^}]*)\}'
    with open(bbl_file) as f:
        text = "".join(f.readlines())
        for match in re.finditer(re_label, text, flags=re.MULTILINE):
            dict[match.group(2)] = match.group(1)
    return dict

def add_labels(bbl_file, label_dict):
    """
    Add labels to an existing BBL file, given a dictionary of natbib labels.
    """
    lines = []
    re_plain = r'\\bibitem\{([^]]*)\}'
    with open(bbl_file) as f:
        for line in f.readlines():
            match = re.match(re_plain, line)
            if match:
                key = match.group(1)
                label = label_dict[key]
                lines.append(r'\bibitem[' + label + ']{' + key + '}\n')
            else:
                lines.append(line)
    return lines

def main(argv=None):
    """
    The entry-point for the fixbbl program. By default, arguments are taken
    from sys.argv. If arguments are passed manually, note that the first
    argument is ignored -- it is assumed to contain the name of the program.
    """

    if argv is None:
        argv = sys.argv

    # Ensure that the required arguments are provided.
    if len(argv) < 3 or len(argv) > 4:
        print __doc__
        return 2

    # Extract the required arguments.
    good_bbl = argv[1]
    bad_bbl = argv[2]
    if len(argv) > 3:
        out_bbl = argv[3]
    else:
        out_bbl = None

    # Update the bbl file.
    dict = label_dict(good_bbl)
    bbl = add_labels(bad_bbl, dict)

    if out_bbl is None:
        for line in bbl:
            print line,
    else:
        with open(out_bbl, 'w') as f:
            for line in bbl:
                f.write(line)

    return 0

if __name__ == "__main__":
    sys.exit(main())

